# docker compose version which is currently 3.8
version: "3.8"


# services : is a list of our container
services:
  # name is optional for our mongodb
  mymongodb:
    # since mongo is an offical image we can use it.
    image: "mongo"

    # the port that we want to publish for mongodb
    ports:
      - "27017:27017"

    # our mongodb depends on volume to keep the data alive.
    volumes:
      - ./mongo/data:/data/db

    # our environment variable
    environment:
      MONGO_INITDB_ROOT_USERNAME: "root"
      MONGO_INITDB_ROOT_PASSWORD: "pass123"

  # name is optional for our backend
  backend:
    # to build an image based on Dockerfile
    # it looks in this folder to find Dockerfile to build an image
    build: ./backend
    # the port that we want to publish for backend
    ports:
      - "8080:8080"

    # depends_on means it will start our backend container once mongo-container is  up and running.
    depends_on:
      - mymongodb

  #  In a typical Docker Compose setup, containers can communicate with each other using service names or container names.
  #  Using localhost to reference another service running in a separate container won't work because each container
  #  has its own network stack, and localhost refers to the network stack of the container itself.
  #
  #  If you want to access the backend service from the backend-tests container using a name like localhost,
  #  you can't do this directly. However, you can modify your test configuration to use the service name,
  #  which is how containers in the same network communicate with each other.
  backend-tests:
      build: ./backend
      command:
        - /bin/sh
        - -c
        - |
          ls -R __tests__
          npm run test
      working_dir: /app
      depends_on:
        - mymongodb
        - backend


  # name is optional for our frontend
  frontend:
    # to build an image based on Dockerfile
    # it looks in this folder to find Dockerfile to build an image
    build: ./frontend

    # the port that we want to publish for frontend
    ports:
      - "5173:5173"
    environment:
      - PORT=5173
    # add bind mount volume to keep have updated source code
    volumes:
      - ./frontend/src:/app/src
    # allow interactive mode
    stdin_open: true
    tty: true

    # it will start our frontend container once backend-container is  up and running.
    depends_on:
      - backend

# declare the volumes name that our app is using.
volumes:
  data:
  src:
